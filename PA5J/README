README file for Programming Assignment 5  (Java edition)
=======================================================

Your directory should now contain the following files:

 ASTConstants.java    -> [course dir]/src/PA5J/ASTConstants.java
 ASTLexer.java	      -> [course dir]/src/PA5J/ASTLexer.java
 ASTParser.java	      -> [course dir]/src/PA5J/ASTParser.java
 AbstractSymbol.java  -> [course dir]/src/PA5J/AbstractSymbol.java
 AbstractTable.java   -> [course dir]/src/PA5J/AbstractTable.java
 BoolConst.java
 Cgen.java	      -> [course dir]/src/PA5J/Cgen.java
 CgenClassTable.java
 CgenNode.java
 CgenSupport.java
 ClassTable.java      -> [course dir]/src/PA5J/ClassTable.java
 Flags.java	      -> [course dir]/src/PA5J/Flags.java
 IdSymbol.java	      -> [course dir]/src/PA5J/IdSymbol.java
 IdTable.java	      -> [course dir]/src/PA5J/IdTable.java
 IntSymbol.java
 IntTable.java	      -> [course dir]/src/PA5J/IntTable.java
 ListNode.java	      -> [course dir]/src/PA5J/ListNode.java
 Makefile	      -> [course dir]/assignments/PA5J/Makefile
 README
 StringSymbol.java
 StringTable.java     -> [course dir]/src/PA5J/StringTable.java
 SymbolTable.java     -> [course dir]/src/PA5J/SymbolTable.java
 SymtabExample.java   -> [course dir]/src/PA5J/SymtabExample.java
 TokenConstants.java  -> [course dir]/src/PA5J/TokenConstants.java
 TreeConstants.java
 TreeNode.java        -> [course dir]/src/PA5J/TreeNode.java
 Utilities.java	      -> [course dir]/src/PA5J/Utilities.java
 cool-tree.aps	      -> [course dir]/src/PA5J/cool-tree.aps
 cool-tree.java
 example.cl

	The Makefile contains targets for compiling and running your
	program, as well as handing it in. DO NOT MODIFY.

	In example.cl you should write a correct Cool program which
	tests as many aspects of the code generator as possible. It
	should pass your code generator, and running spim on the
	generated output should run the program correctly.

	CgenClassTable.java CgenNode.java are the skeleton files for
	the code generator. These skeletons are much larger than the
	ones for previous assignments.  The skeletons provides three
	components of the code generator:

		- functions to build the inheritance graph; (we supply
		  this in case you didn't get this working for PA4)

		- functions to emit global data and constants;
		 
	You should work to understand this code, and it will help you
        write the rest of the code generator.

        TreeNode.java and ListNode.java contain definitions used by
        the tree package. DO NOT MODIFY.

        cool-tree.java specifies and give an implementation of Cool
        ASTs (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to complete the code generating
        methods for all Cool expression nodes.

	BoolConst.java, IntSymbol.java, and StringSymbol.java are used
        to manage constants in Cool programs.  You will need to
        complete the method for generating constant definitions in
        each of these classes.

	CgenSupport.java is general support code for the code
	generator.  You can add functions and constants as you see
	fit, but do not modify anything that's already there.  This
	class also serves as a placeholder for a bunch of constants as
	well as functions to emit spim instructions (we supply these
	to save you some tedious coding).

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement
	a lexer and a parser for reading text representation of ASTs
	from console in the format produced by the parser phase. DO
	NOT MODIFY.

	Cgen.java supplies the driver for the compiler. You should not
        modify this code.  The script mycoolc can pass any of the
        standard flags to the code generator; for this assignment, -c
        (code generator debug) may be useful as it sets a global
        variable cgen_debug to true (1).  If you want your code
        generator to print debug information when the option is set,
        write your debug code in the following format:

	      if (cgen_debug)
	      {
		...
	      }

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code,
	but you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile your compiler and code generator type:

	% make cgen

	To test your compiler, type:

	% ./mycoolc [-o output filename] <file1.cl> <file2.cl> ...

	This command parses all the cool files given on the command
	line, passes them through the semantic checker, and then hands
	the program AST to your code generator.

	To run your compiler on the file example.cl, type:

	% make dotest

	To run the produced code:

	% spim -file file1.s  /* or the output filename you chose */


        Instructions for turning in the assignment will be posted on the
        course web page.

        GOOD LUCK!

================================
My thoughts and implementation idea about the codeGen part

all object are of coolc's defined type
initial types are:
            - Object
            - Void
            - coolc string
            - coolc int
            - coolc bool

in the Heap, locate the .data section and .text section
in .data section, lays
    1. all classes's name table
    2. all classes's prototype table
    3. all classes's dispatch table
    4. initial type's tag
    5. initial types that can be found by compiler
    6. classes's layout, including void
in .text section, lays
    1. methods process, including init method

Object layout:
    offset -4, tag -1 for garbage collection
    offset 0, class tag
    offset 4, class size
    offset 8, dispatch table pointer
    offset 12 and so on, attributes
attributes offset remains the same from most old ancestor to the class itself
dispatch table is the same structure
but attributes are copied when have new object, dispatch table are one, and only
pointers are copied

STEP 1:
define iteration, that is from root to its children. each iteration has same order
first iterate all methods, add their attributes and methods
then iterate again, complete ancestor's attributes and methods
build the Class - Attributes hashtable and Class - Methods hashtable in CgenClass

STEP 2:
build tables and layout in .data section use above information

STEP 3:
build methods process
when do AST iteration, I use a context to perform like so, S, E
-- the context are like symbolTable, at each level the self class(so) will
be the same as the previous level implicitily.
-- context record AbstractSymbol to Integer Offset(from frame pointer: arguments are by positive offset,
temps and locals are by negative offset - 1) pair, this performs like E,
which is the mapping of symbols -> memory location.
-- when evaluate objects, I will check for their mapping through context first, and then attributes
and set their values in assembly language by the correct offset, this performs like S,
which is the mapping of memory location -> value


    I use stack machine with 1 accumulation
    every methods will return in acculumation
        I put the arguments in stack
            arg1
          --------
            arg2
          --------
            ...
          --------
            argN
          --------
          frame pointer
          ----------
          return address
          ----------
          local values
             ...
          ----------
            temps
             ...
    and the return value is always stored in $a0
    before return, load $ra below current $fp,
    move the $sp to $fp, poping all the temps and locals in current frame.
    load $fp the value that $fp currently points to (is the caller's $fp)
    and jump to the value of $ar

STEP 4:
the entry points are programme.Cgen()
the spim load the trap.handler, and this file's entry is Main.main()

just like JAVA, compiler find constructor in Main.main(), coolc use Object.copy to
copy the skeleton, and do init method, if it has ancestor, do ancestor init first,
this will be written in methods in STEP3


//TODO
now I have while loop problem
all value remains the same as the first loop
I think it is because that I only evaluate the
first
