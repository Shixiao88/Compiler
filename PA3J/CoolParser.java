
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 10 16:48:00 CST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 10 16:48:00 CST 2017
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\003\003\000\002\002\004\000\002\005" +
    "\010\000\002\005\012\000\002\005\004\000\002\006\002" +
    "\000\002\004\003\000\002\004\004\000\002\007\006\000" +
    "\002\007\010\000\002\007\013\000\002\007\013\000\002" +
    "\007\014\000\002\007\004\000\002\010\002\000\002\010" +
    "\003\000\002\010\004\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\005\000\002\012\004\000" +
    "\002\017\010\000\002\020\003\000\002\020\004\000\002" +
    "\015\005\000\002\016\003\000\002\016\005\000\002\022" +
    "\002\000\002\022\003\000\002\022\005\000\002\023\004" +
    "\000\002\023\005\000\002\023\004\000\002\023\004\000" +
    "\002\021\005\000\002\021\005\000\002\021\012\000\002" +
    "\021\010\000\002\021\006\000\002\021\011\000\002\021" +
    "\007\000\002\021\005\000\002\021\006\000\002\021\007" +
    "\000\002\021\004\000\002\021\004\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\004\000\002\021\005\000\002\021\006\000\002\021" +
    "\005\000\002\021\005\000\002\021\004\000\002\021\005" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\006\003\006\004\010\001\002\000\010\002" +
    "\001\003\006\004\010\001\002\000\004\002\236\001\002" +
    "\000\004\043\235\001\002\000\010\002\ufffb\003\ufffb\004" +
    "\ufffb\001\002\000\004\055\011\001\002\000\006\011\013" +
    "\050\012\001\002\000\010\003\016\051\ufff3\056\021\001" +
    "\002\000\004\055\014\001\002\000\004\050\015\001\002" +
    "\000\010\003\016\051\ufff3\056\021\001\002\000\004\043" +
    "\231\001\002\000\010\003\ufff2\051\ufff2\056\ufff2\001\002" +
    "\000\010\003\016\051\227\056\021\001\002\000\006\044" +
    "\022\045\023\001\002\000\004\055\221\001\002\000\006" +
    "\046\025\056\026\001\002\000\006\042\206\046\207\001" +
    "\002\000\004\044\032\001\002\000\004\044\030\001\002" +
    "\000\006\042\uffe7\046\uffe7\001\002\000\004\055\031\001" +
    "\002\000\006\042\uffe8\046\uffe8\001\002\000\004\055\033" +
    "\001\002\000\004\050\034\001\002\000\040\003\045\007" +
    "\043\012\053\017\036\020\047\024\040\025\044\027\050" +
    "\041\052\045\054\050\035\052\041\053\037\054\042\056" +
    "\046\001\002\000\040\003\176\007\043\012\053\017\036" +
    "\020\047\024\040\025\044\027\050\041\052\045\054\050" +
    "\035\052\041\053\037\054\042\056\046\001\002\000\040" +
    "\003\045\007\043\012\053\017\036\020\047\024\040\025" +
    "\044\027\050\041\052\045\054\050\035\052\041\053\037" +
    "\054\042\056\046\001\002\000\106\003\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\012\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\022\uffc6\024\uffc6\025\uffc6\027\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\056\uffc6\001\002" +
    "\000\004\055\170\001\002\000\106\003\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\022\uffc5\024\uffc5\025\uffc5\027\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5\001\002" +
    "\000\106\003\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4" +
    "\024\uffc4\025\uffc4\027\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\056\uffc4\001\002\000\040\003\045\007\043" +
    "\012\053\017\036\020\047\024\040\025\044\027\050\041" +
    "\052\045\054\050\035\052\041\053\037\054\042\056\046" +
    "\001\002\000\040\003\045\007\043\012\053\017\036\020" +
    "\047\024\040\025\044\027\050\041\052\045\054\050\035" +
    "\052\041\053\037\054\042\056\046\001\002\000\004\036" +
    "\155\001\002\000\110\003\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\026\152\027\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\045\151\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7\001\002\000" +
    "\040\003\045\007\043\012\053\017\036\020\047\024\040" +
    "\025\044\027\050\041\052\045\054\050\035\052\041\053" +
    "\037\054\042\056\046\001\002\000\040\003\045\007\043" +
    "\012\053\017\036\020\047\024\040\025\044\027\050\041" +
    "\052\045\054\050\035\052\041\053\037\054\042\056\046" +
    "\001\002\000\024\032\060\033\063\034\056\035\057\036" +
    "\061\037\066\040\062\047\065\051\132\001\002\000\040" +
    "\003\045\007\043\012\053\017\036\020\047\024\040\025" +
    "\044\027\050\041\052\045\054\050\035\052\041\053\037" +
    "\054\042\056\046\001\002\000\006\003\114\056\116\001" +
    "\002\000\040\003\045\007\043\012\053\017\036\020\047" +
    "\024\040\025\044\027\050\041\052\045\054\050\035\052" +
    "\041\053\037\054\042\056\046\001\002\000\024\032\060" +
    "\033\063\034\056\035\057\036\061\037\066\040\062\046" +
    "\064\047\065\001\002\000\040\003\045\007\043\012\053" +
    "\017\036\020\047\024\040\025\044\027\050\041\052\045" +
    "\054\050\035\052\041\053\037\054\042\056\046\001\002" +
    "\000\040\003\045\007\043\012\053\017\036\020\047\024" +
    "\040\025\044\027\050\041\052\045\054\050\035\052\041" +
    "\053\037\054\042\056\046\001\002\000\040\003\045\007" +
    "\043\012\053\017\036\020\047\024\040\025\044\027\050" +
    "\041\052\045\054\050\035\052\041\053\037\054\042\056" +
    "\046\001\002\000\040\003\045\007\043\012\053\017\036" +
    "\020\047\024\040\025\044\027\050\041\052\045\054\050" +
    "\035\052\041\053\037\054\042\056\046\001\002\000\004" +
    "\056\104\001\002\000\040\003\045\007\043\012\053\017" +
    "\036\020\047\024\040\025\044\027\050\041\052\045\054" +
    "\050\035\052\041\053\037\054\042\056\046\001\002\000" +
    "\106\003\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8\024" +
    "\uffc8\025\uffc8\027\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\056\uffc8\001\002\000\004\055\072\001\002\000" +
    "\042\003\045\007\043\012\053\017\036\020\047\024\040" +
    "\025\044\027\050\036\067\041\052\045\054\050\035\052" +
    "\041\053\037\054\042\056\046\001\002\000\040\003\045" +
    "\007\043\012\053\017\036\020\047\024\040\025\044\027" +
    "\050\041\052\045\054\050\035\052\041\053\037\054\042" +
    "\056\046\001\002\000\106\003\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\022\uffcd\024\uffcd\025\uffcd\027\uffcd\032\060\033" +
    "\063\034\056\035\057\036\uffcd\037\uffcd\040\062\041\uffcd" +
    "\042\uffcd\043\uffcd\045\uffcd\046\uffcd\047\065\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\056\uffcd\001\002\000\106" +
    "\003\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc\024\uffcc" +
    "\025\uffcc\027\uffcc\032\060\033\063\034\056\035\057\036" +
    "\uffcc\037\uffcc\040\062\041\uffcc\042\uffcc\043\uffcc\045\uffcc" +
    "\046\uffcc\047\065\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\056\uffcc\001\002\000\004\040\073\001\002\000\004" +
    "\056\074\001\002\000\004\045\075\001\002\000\044\003" +
    "\045\007\043\012\053\017\036\020\047\024\040\025\044" +
    "\027\050\041\052\042\uffe5\045\054\046\uffe5\050\035\052" +
    "\041\053\037\054\042\056\046\001\002\000\006\042\100" +
    "\046\101\001\002\000\026\032\060\033\063\034\056\035" +
    "\057\036\061\037\066\040\062\042\uffe4\046\uffe4\047\065" +
    "\001\002\000\040\003\045\007\043\012\053\017\036\020" +
    "\047\024\040\025\044\027\050\041\052\045\054\050\035" +
    "\052\041\053\037\054\042\056\046\001\002\000\106\003" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\027\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\056\uffdc\001\002\000\026\032\060\033\063\034\056\035" +
    "\057\036\061\037\066\040\062\042\uffe3\046\uffe3\047\065" +
    "\001\002\000\106\003\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\022\uffcf\024\uffcf\025\uffcf\027\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\062\041\uffcf\042\uffcf" +
    "\043\uffcf\045\uffcf\046\uffcf\047\065\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\056\uffcf\001\002\000\004\045\105" +
    "\001\002\000\044\003\045\007\043\012\053\017\036\020" +
    "\047\024\040\025\044\027\050\041\052\042\uffe5\045\054" +
    "\046\uffe5\050\035\052\041\053\037\054\042\056\046\001" +
    "\002\000\006\042\100\046\107\001\002\000\106\003\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb" +
    "\027\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\056" +
    "\uffdb\001\002\000\106\003\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\027\uffcb\032\060\033\063" +
    "\034\056\035\057\036\uffcb\037\uffcb\040\062\041\uffcb\042" +
    "\uffcb\043\uffcb\045\uffcb\046\uffcb\047\065\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\056\uffcb\001\002\000\106\003" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\024\uffd2\025" +
    "\uffd2\027\uffd2\032\uffd2\033\063\034\uffd2\035\057\036\uffd2" +
    "\037\uffd2\040\062\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046" +
    "\uffd2\047\065\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\056\uffd2\001\002\000\106\003\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\022\uffd0\024\uffd0\025\uffd0\027\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\062\041\uffd0" +
    "\042\uffd0\043\uffd0\045\uffd0\046\uffd0\047\065\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\001\002\000\106" +
    "\003\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1\024\uffd1" +
    "\025\uffd1\027\uffd1\032\uffd1\033\063\034\uffd1\035\057\036" +
    "\uffd1\037\uffd1\040\062\041\uffd1\042\uffd1\043\uffd1\045\uffd1" +
    "\046\uffd1\047\065\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\056\uffd1\001\002\000\004\042\130\001\002\000\006" +
    "\010\125\042\124\001\002\000\004\044\120\001\002\000" +
    "\006\010\uffee\042\uffee\001\002\000\004\055\121\001\002" +
    "\000\010\010\ufff0\026\122\042\ufff0\001\002\000\040\003" +
    "\045\007\043\012\053\017\036\020\047\024\040\025\044" +
    "\027\050\041\052\045\054\050\035\052\041\053\037\054" +
    "\042\056\046\001\002\000\026\010\uffef\032\060\033\063" +
    "\034\056\035\057\036\061\037\066\040\062\042\uffef\047" +
    "\065\001\002\000\004\056\116\001\002\000\040\003\045" +
    "\007\043\012\053\017\036\020\047\024\040\025\044\027" +
    "\050\041\052\045\054\050\035\052\041\053\037\054\042" +
    "\056\046\001\002\000\106\003\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\022\uffd6\024\uffd6\025\uffd6\027\uffd6\032\060\033" +
    "\063\034\056\035\057\036\061\037\066\040\062\041\uffd6" +
    "\042\uffd6\043\uffd6\045\uffd6\046\uffd6\047\065\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\056\uffd6\001\002\000\006" +
    "\010\uffed\042\uffed\001\002\000\006\010\uffec\042\uffec\001" +
    "\002\000\106\003\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022" +
    "\uffce\024\uffce\025\uffce\027\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\062\041\uffce\042\uffce\043" +
    "\uffce\045\uffce\046\uffce\047\065\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\056\uffce\001\002\000\004\043\133\001" +
    "\002\000\010\003\ufff7\051\ufff7\056\ufff7\001\002\000\106" +
    "\003\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\024\uffc9" +
    "\025\uffc9\027\uffc9\032\060\033\063\034\056\035\057\036" +
    "\061\037\066\040\062\041\uffc9\042\uffc9\043\uffc9\045\uffc9" +
    "\046\uffc9\047\065\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\056\uffc9\001\002\000\024\022\136\032\060\033\063" +
    "\034\056\035\057\036\061\037\066\040\062\047\065\001" +
    "\002\000\004\056\140\001\002\000\006\021\uffea\056\uffea" +
    "\001\002\000\004\044\144\001\002\000\006\021\143\056" +
    "\140\001\002\000\006\021\uffe9\056\uffe9\001\002\000\106" +
    "\003\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\022\uffd5\024\uffd5" +
    "\025\uffd5\027\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\056\uffd5\001\002\000\004\055\145\001\002\000\004" +
    "\023\146\001\002\000\040\003\045\007\043\012\053\017" +
    "\036\020\047\024\040\025\044\027\050\041\052\045\054" +
    "\050\035\052\041\053\037\054\042\056\046\001\002\000" +
    "\024\032\060\033\063\034\056\035\057\036\061\037\066" +
    "\040\062\043\150\047\065\001\002\000\006\021\uffeb\056" +
    "\uffeb\001\002\000\044\003\045\007\043\012\053\017\036" +
    "\020\047\024\040\025\044\027\050\041\052\042\uffe5\045" +
    "\054\046\uffe5\050\035\052\041\053\037\054\042\056\046" +
    "\001\002\000\040\003\153\007\043\012\053\017\036\020" +
    "\047\024\040\025\044\027\050\041\052\045\054\050\035" +
    "\052\041\053\037\054\042\056\046\001\002\000\106\003" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\024\uffdd\025" +
    "\uffdd\027\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\155" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\056\uffdd\001\002\000\106\003\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\022\uffde\024\uffde\025\uffde\027\uffde\032\060\033" +
    "\063\034\056\035\057\036\061\037\066\040\062\041\uffde" +
    "\042\uffde\043\uffde\045\uffde\046\uffde\047\065\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\056\uffde\001\002\000\040" +
    "\003\045\007\043\012\053\017\036\020\047\024\040\025" +
    "\044\027\050\041\052\045\054\050\035\052\041\053\037" +
    "\054\042\056\046\001\002\000\106\003\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\012\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\022\uffca\024\uffca\025\uffca\027\uffca\032" +
    "\060\033\063\034\056\035\057\036\uffca\037\uffca\040\062" +
    "\041\uffca\042\uffca\043\uffca\045\uffca\046\uffca\047\065\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\056\uffca\001\002" +
    "\000\006\042\100\046\160\001\002\000\106\003\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\012\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\022\uffda\024\uffda\025\uffda\027" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\056\uffda" +
    "\001\002\000\106\003\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\022\uffd3\024\uffd3\025\uffd3\027\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\062\041\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\046\uffd3\047\065\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\056\uffd3\001\002\000\024\016\163" +
    "\032\060\033\063\034\056\035\057\036\061\037\066\040" +
    "\062\047\065\001\002\000\040\003\045\007\043\012\053" +
    "\017\036\020\047\024\040\025\044\027\050\041\052\045" +
    "\054\050\035\052\041\053\037\054\042\056\046\001\002" +
    "\000\024\005\165\032\060\033\063\034\056\035\057\036" +
    "\061\037\066\040\062\047\065\001\002\000\040\003\045" +
    "\007\043\012\053\017\036\020\047\024\040\025\044\027" +
    "\050\041\052\045\054\050\035\052\041\053\037\054\042" +
    "\056\046\001\002\000\024\006\167\032\060\033\063\034" +
    "\056\035\057\036\061\037\066\040\062\047\065\001\002" +
    "\000\106\003\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\056\uffd9\001\002\000\106\003\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\012\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\022\uffd4\024\uffd4\025\uffd4\027\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\056\uffd4\001" +
    "\002\000\024\014\172\032\060\033\063\034\056\035\057" +
    "\036\061\037\066\040\062\047\065\001\002\000\040\003" +
    "\045\007\043\012\053\017\036\020\047\024\040\025\044" +
    "\027\050\041\052\045\054\050\035\052\041\053\037\054" +
    "\042\056\046\001\002\000\024\015\174\032\060\033\063" +
    "\034\056\035\057\036\061\037\066\040\062\047\065\001" +
    "\002\000\106\003\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\056\uffd8\001\002\000\042\003\045\007" +
    "\043\012\053\017\036\020\047\024\040\025\044\027\050" +
    "\041\052\045\054\050\035\051\204\052\041\053\037\054" +
    "\042\056\046\001\002\000\044\003\045\007\043\012\053" +
    "\017\036\020\047\024\040\025\044\027\050\036\155\041" +
    "\052\043\202\045\054\050\035\052\041\053\037\054\042" +
    "\056\046\001\002\000\024\032\060\033\063\034\056\035" +
    "\057\036\061\037\066\040\062\043\200\047\065\001\002" +
    "\000\042\003\uffe2\007\uffe2\012\uffe2\017\uffe2\020\uffe2\024" +
    "\uffe2\025\uffe2\027\uffe2\041\uffe2\045\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\056\uffe2\001\002\000\062\003" +
    "\uffdf\007\uffdf\012\uffdf\017\uffdf\020\uffdf\024\uffdf\025\uffdf" +
    "\027\uffdf\032\060\033\063\034\056\035\057\036\061\037" +
    "\066\040\062\041\uffdf\045\uffdf\047\065\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\056\uffdf\001\002\000\042\003" +
    "\uffe0\007\uffe0\012\uffe0\017\uffe0\020\uffe0\024\uffe0\025\uffe0" +
    "\027\uffe0\041\uffe0\045\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\056\uffe0\001\002\000\024\032\060\033\063" +
    "\034\056\035\057\036\061\037\066\040\062\043\205\047" +
    "\065\001\002\000\106\003\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\022\uffd7\024\uffd7\025\uffd7\027\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\056\uffd7\001\002\000\042\003" +
    "\uffe1\007\uffe1\012\uffe1\017\uffe1\020\uffe1\024\uffe1\025\uffe1" +
    "\027\uffe1\041\uffe1\045\uffe1\050\uffe1\051\uffe1\052\uffe1\053" +
    "\uffe1\054\uffe1\056\uffe1\001\002\000\004\056\026\001\002" +
    "\000\004\044\210\001\002\000\004\055\211\001\002\000" +
    "\004\050\212\001\002\000\042\003\045\007\043\012\053" +
    "\017\036\020\047\024\040\025\044\027\050\041\052\045" +
    "\054\050\035\051\214\052\041\053\037\054\042\056\046" +
    "\001\002\000\024\032\060\033\063\034\056\035\057\036" +
    "\061\037\066\040\062\047\065\051\216\001\002\000\004" +
    "\043\215\001\002\000\010\003\ufff6\051\ufff6\056\ufff6\001" +
    "\002\000\004\043\217\001\002\000\010\003\ufff5\051\ufff5" +
    "\056\ufff5\001\002\000\006\042\uffe6\046\uffe6\001\002\000" +
    "\006\026\223\043\222\001\002\000\010\003\ufff9\051\ufff9" +
    "\056\ufff9\001\002\000\040\003\045\007\043\012\053\017" +
    "\036\020\047\024\040\025\044\027\050\041\052\045\054" +
    "\050\035\052\041\053\037\054\042\056\046\001\002\000" +
    "\024\032\060\033\063\034\056\035\057\036\061\037\066" +
    "\040\062\043\225\047\065\001\002\000\010\003\ufff8\051" +
    "\ufff8\056\ufff8\001\002\000\010\003\ufff1\051\ufff1\056\ufff1" +
    "\001\002\000\004\043\230\001\002\000\010\002\ufffe\003" +
    "\ufffe\004\ufffe\001\002\000\010\003\ufff4\051\ufff4\056\ufff4" +
    "\001\002\000\010\003\016\051\233\056\021\001\002\000" +
    "\004\043\234\001\002\000\010\002\uffff\003\uffff\004\uffff" +
    "\001\002\000\010\002\ufffd\003\ufffd\004\ufffd\001\002\000" +
    "\004\002\000\001\002\000\010\002\ufffa\003\ufffa\004\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\010\003\004\004\003\005\006\001\001\000" +
    "\004\005\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\016\010\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\016\010\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\026\016\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\050\001\001" +
    "\000\006\021\176\023\174\001\001\000\004\021\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\161\001\001\000\004\021" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\134\001\001\000\004\021\133\001\001\000\002\001" +
    "\001\000\004\021\130\001\001\000\006\011\116\012\114" +
    "\001\001\000\004\021\054\001\001\000\002\001\001\000" +
    "\004\021\112\001\001\000\004\021\111\001\001\000\004" +
    "\021\110\001\001\000\004\021\107\001\001\000\002\001" +
    "\001\000\004\021\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\067\001\001\000\004\021\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\076\022" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\076\022\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\122\001\001\000\002\001\001\000\004\011\126\001" +
    "\001\000\004\021\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\136\020\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\076\022\156\001\001\000\004\021\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\163" +
    "\001\001\000\002\001\001\000\004\021\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\202\001\001\000\004\021\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

    /* my implementation */
    Expression createLet(java.util.Enumeration e, Expression finalExp) {
	if (e.hasMoreElements()) {
	    attr attE = (attr)e.nextElement();
	    return new let(curr_lineno(), attE.name, attE.type_decl, attE.init, createLet(e, finalExp));
	} else {
	    return finalExp;
	}
    }
    /* finish my implementation */


  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= BOOL_CONST 
            {
              Expression RESULT = null;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= STR_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= INT_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= OBJECTID 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new object(curr_lineno(), o); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= error EQ expr 
            {
              Expression RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr EQ expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr LT EQ expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr LT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NEG expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= ISVOID expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new isvoid(curr_lineno(), e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NEW TYPEID 
            {
              Expression RESULT = null;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new new_(curr_lineno(), t); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= CASE expr OF case_list ESAC 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= LET let_list IN expr 
            {
              Expression RESULT = null;
		Features llst = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = createLet(llst.getElements(), body); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= LBRACE expr_lists RBRACE 
            {
              Expression RESULT = null;
		Expressions els = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(), els); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(), e1, e2, e3); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, es); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr DOT OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), e, o, es); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN expr_list RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(), e, t, o, es); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= OBJECTID ASSIGN error 
            {
              Expression RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new assign(curr_lineno(), n, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_lists ::= error expr 
            {
              Expressions RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(17/*expr_lists*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_lists ::= error SEMI 
            {
              Expressions RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(17/*expr_lists*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_lists ::= expr_lists expr SEMI 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(17/*expr_lists*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_lists ::= expr SEMI 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(17/*expr_lists*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_list ::= expr_list COMMA expr 
            {
              Expressions RESULT = null;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = es.appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(16/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_list ::= expr 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(16/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr_list ::= 
            {
              Expressions RESULT = null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(16/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT = null;
		Formals fms = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		formalc fm = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fms.appendElement(fm); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_list ::= formal 
            {
              Formals RESULT = null;
		formalc fm = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(fm); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new formalc(curr_lineno(), n, t); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // case_list ::= case_list case 
            {
              Cases RESULT = null;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(14/*case_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // case_list ::= case 
            {
              Cases RESULT = null;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(14/*case_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // case ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Case RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new branch(curr_lineno(), o, t, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*case*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // let_list ::= error COMMA 
            {
              Features RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*let_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // let_list ::= let_list COMMA let 
            {
              Features RESULT = null;
		Features llt = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Feature l = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = llt.appendElement(l); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*let_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // let_list ::= let 
            {
              Features RESULT = null;
		Feature l = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Features(curr_lineno())).appendElement(l); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*let_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // let ::= OBJECTID COLON TYPEID ASSIGN expr 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new attr(curr_lineno(), o, t, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*let*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // let ::= OBJECTID COLON TYPEID 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*let*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // feature_list ::= feature_list feature 
            {
              Features RESULT = null;
		Features fs = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = fs.appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // feature_list ::= feature 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // feature ::= error SEMI 
            {
              Feature RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals fml = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), o, fml, t, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE RBRACE SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-8)).value;
		Formals fml = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		 RESULT = new method(curr_lineno(), o, fml, t, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID LPAREN RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-8)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), o, new Formals(curr_lineno()), t, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), o, t, e); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class_list ::= class 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dummy_feature_list ::= 
            {
              Features RESULT = null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= error SEMI 
            {
              class_c RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

